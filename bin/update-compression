#!/usr/bin/env node
/*!
 * @file
 * OS.js - JavaScript Operating System - update-compression
 *
 * This script compresses all JavaScript and CSS for the frontend (core)
 * for using in a production environment
 *
 * Copyright (c) 2011-2012, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @author Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 * @created 2012-01-04
 */

var _config     = require('../config'),
    _resources  = require(_config.PATH_SRC + '/resources.js'),
    _packages   = require(_config.PATH_SRC + '/packages.js');

var _path     = require('path'),
    _fs       = require('fs'),
    _cp       = require('child_process');

var compressor = 'java -jar ' + _path.join(_config.PATH_VENDOR, 'yui.jar'); // FIXME

var languages = ['en_US', 'nb_NO']; // FIXME

var ___started = (new Date()).getTime();
var ___before = 0;
var ___after = 0;

function enumCoreResources(callback) {
  var i, j;
  var list = [];

  for ( i = 0; i < languages.length; i++ ) {
    list.push(_path.join(_config.PATH_JSLOCALE, languages[i] + '.js'));
  }

  for ( i = 0; i < _resources.coreResources.length; i++ ) {
    list.push(_path.join(_config.PATH_JAVASCRIPT, _resources.coreResources[i]));
  }

  for ( i in _resources.dialogResources ) {
    if ( _resources.dialogResources.hasOwnProperty(i) ) {
      for ( j = 0; j < _resources.dialogResources[i].resources.length; j++ ) {
        list.push(_path.join(_config.PATH_JAVASCRIPT, _resources.dialogResources[i].resources[j]));
      }
    }
  }

  /* FIXME: We need to add support in client.js
  _packages.getInstalledSystemPackages('en_US', function(success, result) {
    if ( success ) {
      for ( i in result ) {
        if ( result.hasOwnProperty(i) ) {
          for ( j = 0; j < result[i].resources.length; j++ ) {
            list.push(_path.join(_config.PATH_PACKAGES, i, result[i].resources[j]));
          }
        }
      }
    }

    callback(list);
  });
  */
  callback(list);
}

function _compress(ssize, type, src, dest, callback) {
  console.log('>', dest);

  var time = (new Date()).getTime();
  var cmd = [compressor, '--preserve-semi', '--charset', 'utf-8', '--type', type, src, '-o', dest].join(' ');
  var proc = _cp.exec(cmd, function(err, stdout, stderr) {
    var tdiff = (((new Date()).getTime()) - time) / 1000;
    var nsize = _fs.statSync(dest).size;
    var sdiff = ssize - nsize;
    var perc  = -parseInt(((nsize / ssize - 1) * 100), 10);

    console.log('In', tdiff, 'second(s)', '|', ssize, '->', nsize, '(', sdiff, '/', perc + '%', ')');
    console.log('');

    if ( err !== null ) {
      console.log('child process exited with code ' + err);
      console.log('stdout: ' + stdout);
      console.log('stderr: ' + stderr);
      callback(false, src);
    } else {
      ___before += ssize;
      ___after  += nsize;

      callback(true, src);
    }
  });
}

function compressJavaScript(src, dest, callback) {
  _fs.readFile(src, function(err, data) {
    if ( err ) {
      callback(false, err);
    } else {
      var fsize = _fs.statSync(src).size;
      var replaced = data.toString().replace(/(console)\.(log|info|error|warn|warning|group|groupEnd)\((.*)\);/g, '');
      _fs.writeFile(dest, replaced, 'utf-8', function(err) {
        if ( err ) {
          callback(false, err);
        } else {
          _compress(fsize, 'js', dest, dest, callback);
        }
      });
    }
  });
}

function compressCSS(src, dest, callback) {
  var fsize = _fs.statSync(src).size;
  _compress(fsize, 'css', src, dest, callback);
}

function done(list) {
  var ftime = parseInt(((new Date()).getTime() - ___started) / 1000, 10);
  console.log('Compressed', list.length, 'file(s) in', ftime, 'second(s)')
  console.log('From', ___before, 'to', ___after, '(', -parseInt(((___after / ___before - 1) * 100), 10) + '%', ')');
  console.log('');
}

enumCoreResources(function(list) {
  var successes = [];

  var __next = function() {
    var src  = list.pop();
    var path = _path.join(_path.dirname(src), _config.COMPRESS_DIRNAME);
    var dest = _path.join(path, _path.basename(src));

    try {
      _fs.mkdirSync(path);
    } catch ( err ) {}

    if ( src.match(/\.js$/) ) {
      compressJavaScript(src, dest, __finished);
    } else if ( src.match(/\.css$/) ) {
      compressCSS(src, dest, __finished);
    }
  };

  var __finished = function(result, filename) {
    if ( result ) {
      successes.push(filename);
    }

    if ( list.length ) {
      __next();
    } else {
      done(successes);
    }
  };

  console.log('Got', list.length, 'file(s)...\n\n');
  __finished();
});

