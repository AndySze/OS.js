#!/usr/bin/env php
<?php
/*!
 * @file
 * OS.js - JavaScript Operating System - update-compression
 *
 * Update the compression (minimize) on scripts, stylesheets etc.
 *
 * Copyright (c) 2011-2012, Anders Evenrud <andersevenrud@gmail.com>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @package OSjs.Utilities
 * @author Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */

define("NODB", true);
require "header.php";

//
// Cache
//
$timestamps = Array();
if ( file_exists(MINIMIZE_CACHE) ) {
  $timestamps = (Array)json_decode(file_get_contents(MINIMIZE_CACHE));
}

function check($path) {
  global $timestamps;

  $fp = @filemtime($path);
  $changed = true;
  if ( isset($timestamps[$path]) ) {
    $changed = ($timestamps[$path] != $fp);
  }
  $timestamps[$path] = $fp;

  return $changed;
}

//
// Collect resources
//

$packages  = Array();
$resources = Array(
  "theme.default.css",
  "theme.dark.css",
  "theme.light.css",
  "cursor.default.css",
  "main.css",
  "pimp.css",
  "glade.css",
  "init.js",
  "classes.js",
  "core.js",
  "main.js",
  "utils.js"
);
$locales   = Array(
  "en_US.js",
  "nb_NO.js"
);

foreach ( Dialog::$Registered as $dkey => $dval ) {
  foreach ( $dval["resources"] as $res ) {
    $resources[] = $res;
  }
}

if ( $xml = file_get_contents(PACKAGE_BUILD) ) {
  if ( $xml = new SimpleXmlElement($xml) ) {
    foreach ( $xml as $app ) {
      if ( isset($app->resource) ) {
      var_dump($app);
        foreach ( $app->resource as $r ) {
          $packages[] = "/" . ((string) $app['packagename']) . "/" . (string) $r;
        }
      }
    }
  }
}

//
// Minimize
//
$size_before = 0;
$size_after  = 0;
$size_result = 0;

print "Compressing Resources:\n";
foreach ( $resources as $res ) {
  if ( check(sprintf("%s/%s", PATH_JSBASE, $res)) ) {
    if ( $r = ResourceManager::MinimizeFile(PATH_JSBASE, $res) ) {
      print "  * {$r['filename']}\n";
      $size_before += $r['before'];
      $size_after  += $r['after'];
    }
  } else {
    print "  * {$res} [SKIPPED]\n";
  }
}

print "Compressing Locales:\n";
foreach ( $locales as $loc ) {
  if ( check(sprintf("%s/%s", PATH_JSLOCALE, $loc)) ) {
    if ( $r = ResourceManager::MinimizeFile(PATH_JSLOCALE, $loc) ) {
      print "  * {$r['filename']}\n";
      $size_before += $r['before'];
      $size_after  += $r['after'];
    }
  } else {
    print "  * {$loc} [SKIPPED]\n";
  }
}

print "Compressing Packages:\n";
foreach ( $packages as $pkg ) {
  $dir = dirname($pkg);
  $fna = basename($pkg);
  $base = sprintf("%s/%s", PATH_PACKAGES, $dir);

  if ( check(sprintf("%s/%s", $base, $fna)) ) {
    if ( $r = ResourceManager::MinimizeFile($base, $fna) ) {
      print "  * {$pkg}\n";
      $size_before += $r['before'];
      $size_after  += $r['after'];
    }
  } else {
    print "  * {$pkg} [SKIPPED]\n";
  }
}

if ( $size_before > 0 && $size_after > 0 ) {
  $size_result = ((int) ((($size_before - $size_after) / $size_before) * 100));
}

file_put_contents(MINIMIZE_CACHE, json_encode((Array)$timestamps));

print "\nCompleted! Before: {$size_before}, After: {$size_after}, {$size_result}%\n";
?>
