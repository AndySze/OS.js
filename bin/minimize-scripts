#!/usr/bin/env php
<?php
/**
 * Compress all resources
 *
 * @package OSjs.Utilities
 * @author Anders Evenrud <andersevenrud@gmail.com>
 * @licence Simplified BSD License
 */

require "header.php";

//
// Cache
//
$timestamps = Array();
if ( file_exists(MINIMIZE_CACHE) ) {
  $timestamps = (Array)json_decode(file_get_contents(MINIMIZE_CACHE));
}

function check($path) {
  global $timestamps;

  $fp = filemtime($path);
  $changed = true;
  if ( isset($timestamps[$path]) ) {
    $changed = ($timestamps[$path] != $fp);
  }
  $timestamps[$path] = $fp;

  return $changed;
}

//
// Collect resources
//

$packages  = Array();
$resources = Array(
  "theme.default.css",
  "theme.dark.css",
  "theme.light.css",
  "cursor.default.css",
  "main.css",
  "pimp.css",
  "glade.css",
  "init.js",
  "classes.js",
  "core.js",
  "main.js"
);
$locales   = Array(
  "en_US.js",
  "nb_NO.js"
);

if ( $xml = file_get_contents(PACKAGE_BUILD) ) {
  if ( $xml = new SimpleXmlElement($xml) ) {
    foreach ( $xml->application as $app ) {
      if ( isset($app->resource) ) {
        foreach ( $app->resource as $r ) {
          $packages[] = "/" . (string) $app['class'] . "/" . (string) $r;
        }
      }
    }
    foreach ( $xml->panelitem as $app ) {
      if ( isset($app->resource) ) {
        foreach ( $app->resource as $r ) {
          $packages[] = "/" . (string) $app['class'] . "/" . (string) $r;
        }
      }
    }
  }
}

//
// Minimize
//
$size_before = 0;
$size_after  = 0;
$size_result = 0;

print "Compressing Resources:\n";
foreach ( $resources as $res ) {
  if ( check(sprintf("%s/%s", PATH_JSBASE, $res)) ) {
    if ( $r = ResourceManager::MinimizeFile(PATH_JSBASE, $res) ) {
      print "  * {$r['filename']}\n";
      $size_before += $r['before'];
      $size_after  += $r['after'];
    }
  } else {
    print "  * {$res} [SKIPPED]\n";
  }
}

print "Compressing Locales:\n";
foreach ( $locales as $loc ) {
  if ( check(sprintf("%s/%s", PATH_JSLOCALE, $loc)) ) {
    if ( $r = ResourceManager::MinimizeFile(PATH_JSLOCALE, $loc) ) {
      print "  * {$r['filename']}\n";
      $size_before += $r['before'];
      $size_after  += $r['after'];
    }
  } else {
    print "  * {$loc} [SKIPPED]\n";
  }
}

print "Compressing Packages:\n";
foreach ( $packages as $pkg ) {
  $dir = dirname($pkg);
  $fna = basename($pkg);
  $base = sprintf("%s/%s", PATH_PACKAGES, $dir);

  if ( check(sprintf("%s/%s", $base, $fna)) ) {
    if ( $r = ResourceManager::MinimizeFile($base, $fna) ) {
      print "  * {$pkg}\n";
      $size_before += $r['before'];
      $size_after  += $r['after'];
    }
  } else {
    print "  * {$pkg} [SKIPPED]\n";
  }
}

if ( $size_before > 0 && $size_after > 0 ) {
  $size_result = ((int) ((($size_before - $size_after) / $size_before) * 100));
}

file_put_contents(MINIMIZE_CACHE, json_encode((Array)$timestamps));

print "\nCompleted! Before: {$size_before}, After: {$size_after}, {$size_result}%\n";
?>
