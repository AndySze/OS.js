#!/usr/bin/env php
<?php
/**
 * Compress all resources
 *
 * @package OSjs.Utilities
 * @author Anders Evenrud <andersevenrud@gmail.com>
 */

require "header.php";


$total_before = 0;
$total_after = 0;

function compress_list($itype, $files) {
  global $total_before;
  global $total_after;

  foreach ( $files as $file ) {
    // Build command
    $type = preg_match("/\.js$/", $file) ? "js" : "css";
    $path = ($itype == 1 ? PATH_RESOURCES : ($itype === 0 ? PATH_JSBASE : PATH_APPS)) . "/{$file}";
    if ( file_exists($path) ) {

      $cmd  = PATH_PROJECT_BIN . "/yui.sh";
      $cmd  = sprintf("%s/yui.sh %s/yuicompressor-2.4.6.jar", PATH_PROJECT_BIN, PATH_PROJECT_VENDOR);

      $tmp_path = "/tmp/OSjs-minimize";
      $content = file_get_contents($path);
      $content = preg_replace("/(console)\.(log|info|error|warning|group|groupEnd)\((.*)\);/", "", $content);

      file_put_contents($tmp_path, $content);

      $args = "--preserve-semi ";
      if ( $type == "js" ) {
        $args .= sprintf("--type js --charset UTF-8 %s", escapeshellarg($tmp_path));
      } else {
        $args .= sprintf("--type css --charset UTF-8 %s", escapeshellarg($tmp_path));
      }

      // Run command
      $exec = sprintf("%s %s 2>&1", $cmd, $args);
      $size = 0;
      $comp = 0;
      $perc = 0;
      if ( !($content = shell_exec($exec)) ) {
        $content = "/* FAILED TO GET CONTENTS */";
      } else {
        $size    = filesize($path);
        $comp    = strlen($content);

        if ( $size && $comp ) {
          $perc = 100 - round(($comp / $size) * 100);
        }

        $total_before += $size;
        $total_after  += $comp;
      }

      $label = "\t{$file}";
      $spaces = str_pad("", (30 - strlen($label)));
      print sprintf("%s%s ($size => $comp, $perc%%)\n", $label, $spaces);

      // Write cached file
      if ( $itype === 2 ) {
        $out_path = PATH_APPS . "/" . dirname($file) . "/_min/" . basename($file) ;
      } else if ( $itype === 1 ) {
        $out_path = PATH_RESOURCES . "/_min/" . basename($file);
      } else {
        $out_path = PATH_JSBASE . "/_min/" . basename($file);
      }

      if ( !is_dir(dirname($out_path)) ) {
        mkdir(dirname($out_path));
      }
      file_put_contents($out_path, $content);
    }
  }
}

//
// MAIN
//

$base_files         = Array();
$resource_files     = Array();
$application_files  = Array();

// Read registered panel items
foreach ( Panel::$Registered as $n => $v ) {
  $resource_files = array_merge($resource_files, $v['resources']);
}

// Read registered dialogs
foreach ( Dialog::$Registered as $n => $v ) {
  $resource_files = array_merge($resource_files, $v['resources']);
}

// Read registered applications
if ( $xml = file_get_contents(APPLICATION_BUILD) ) {
  if ( $xml = new SimpleXmlElement($xml) ) {
    foreach ( $xml->application as $app ) {
      $app_name     = (string) $app['class'];
      foreach ( $app->resource as $res ) {
        $application_files[] = "{$app_name}/" . ((string) $res);
      }
    }
  }
}

// Read base files
$base_files = Array(
  "theme.default.css",
  "theme.dark.css",
  "theme.light.css",
  "cursor.default.css",
  "init.js",
  "classes.js",
  "core.js",
  "main.js"
);

print "Compressing base files...\n";
compress_list(0, $base_files);
print "Compressing applications...\n";
compress_list(2, $application_files);
print "Compressing resources...\n";
compress_list(1, $resource_files);

$perc = 0;
if ( $total_before && $total_after ) {
  $perc = 100 - round(($total_after / $total_before) * 100);
}

print "\nCompressed {$total_before} into {$total_after} ({$perc}% compression)\n";

?>
