#!/usr/bin/env php
<?php

require "header.php";

$root = PATH_APPS . "/";
$config = APPLICATION_BUILD;

$doc = new DomDocument();
$doc->xmlVersion    = "1.0";
$doc->formatOutput  = true;
$doc->encoding      = 'UTF-8';

$build = isset($argv[1]) && $argv[1] == "build";

$root_node = $doc->createElement("applications");

if ( $dh  = opendir($root) ) {
  while (false !== ($filename = readdir($dh))) {
    if ( preg_match("/^(Application|System)(.*)(\.glade)$/", $filename) ) {
      echo "Building {$filename}...\n";

      $cname = str_replace(".glade", "", $filename);

      if ( constant("{$cname}::APPLICATION_ENABLED") === false ) {
        echo "\tNot enabled!\n";
        continue;
      }

      if ( $glade = Glade::convert($root . $filename) ) {
        $html    = $glade->__toDocumentString();
        $window  = $glade->getApplicationProperties();
        $signals = $glade->getApplicationSignals();

        $js_methods = "";
        $js_run = "";

        foreach ( $signals as $obj => $evs ) {
          foreach ( $evs as $ev_type => $ev_handler ) {
            $js_methods .= <<<EOJAVASCRIPT

      Event{$ev_handler} : function(el, ev) {
      },


EOJAVASCRIPT;


            $js_run .= <<<EOJAVASCRIPT

        el.find(".{$obj}").{$ev_type}(function(ev) {
          self.Event{$ev_handler}(this, ev);
        });

EOJAVASCRIPT;

          }
        }

        $js     = <<<EOJAVASCRIPT
/**
 * Application: {$cname}
 *
 * @package ajwm.Applications
 * @author Anders Evenrud <andersevenrud@gmail.com>
 * @class
 */
var {$cname} = (function(\$, undefined) {
  return function(Application, app, API, argv) {
    var _{$cname} = Application.extend({


      // !!! DO NOT TOUCH

      init : function() {
        this._super("{$cname}");
      },

      destroy : function() {
        this._super();
      },

%s

      run : function() {
        var el = app.\$element;
        var self = this;

%s

        this._super(el);
      }
    });

    // !!! READ-ONLY

    ///////////////////////////////////////////////////////////////////////////
    // APPLICATION
    ///////////////////////////////////////////////////////////////////////////

    var __{$cname} = _{$cname}.extend({

      init : function() {
        this._super();
      },

      destroy : function() {
        this._super();
      },

      run : function() {
        var el = app.\$element;
        var self = this;

        this._super();

        // Do your stuff here
      }
    });

    return new __{$cname}();
  };
})(\$);
EOJAVASCRIPT;

        $css = <<<EOCSS
@charset "UTF-8";
/**
 * Application: {$cname}
 *
 * @package ajwm.Applications
 * @author Anders Evenrud <andersevenrud@gmail.com>
 */

/* !!! READ-ONLY */

.{$cname} {

}

EOCSS;

        if ( !$window['title'] ) {
          $window['title'] = constant("{$cname}::APPLICATION_TITLE");
        }
        if ( !$window['icon'] ) {
          $window['icon'] = constant("{$cname}::APPLICATION_ICON");
        }

        $js = sprintf($js, $js_methods, $js_run);

        $node = $doc->createElement("application");
        $node->setAttribute("class", $cname);
        $node->setAttribute("type", constant("{$cname}::APPLICATION_SYSTEM") ? "system" : "normal");

        $p_html = $doc->createElement("property");
        $p_html->setAttribute("name", "html");
        $p_html->appendChild($doc->createCDATASection($html));

        $p_window = $doc->createElement("property");
        $p_window->setAttribute("name", "window");
        $p_window->appendChild(new DomText(json_encode($window)));

        $p_js = $doc->createElement("property");
        $p_js->setAttribute("name", "javascript");
        $p_js->appendChild($doc->createCDATASection($js));

        $p_css = $doc->createElement("property");
        $p_css->setAttribute("name", "style");
        $p_css->appendChild($doc->createCDATASection($css));

        $node->appendChild($p_window);
        $node->appendChild($p_html);
        $node->appendChild($p_js);
        $node->appendChild($p_css);

        if ( $build ) {
          $ct = preg_match("/^System/", $cname) ? "sys" : "app";
          $cn = strtolower(preg_match("/^System/", $cname) ? str_replace("System", "", $cname) : str_replace("Application", "", $cname));

          $fname_js  = PATH_PROJECT . "/public_html/js/{$ct}.{$cn}.js";
          $fname_css = PATH_PROJECT . "/public_html/css/{$ct}.{$cn}.css";

          print "\tBuilding javascript: \n";
          print "\t\t" . basename($fname_js) . "\n";

          if ( !file_exists($fname_js) ) {
            file_put_contents($fname_js, $js);
            print "\t\tCREATED!\n";
          } else {
            $content = file_get_contents($fname_js);
            $old = strstr($content, "    // !!! READ-ONLY", true);
            $new = strstr($js, "    // !!! READ-ONLY", true);
            file_put_contents($fname_js, str_replace($old, $new, $content));
            print "\t\tUPDATED!\n";
          }

          print "\tBuilding stylesheets: \n";
          print "\t\t" . basename($fname_css) . "\n";

          if ( !file_exists($fname_css) ) {
            file_put_contents($fname_css, $css);
            print "\t\tCREATED!\n";
          } else {
            $content = file_get_contents($fname_css);
            $old = strstr($content, "/* !!! READ-ONLY */", true);
            $new = strstr($css, "/* !!! READ-ONLY */", true);
            file_put_contents($fname_css, str_replace($old, $new, $content));
            print "\t\tUPDATED!\n";
          }
        }

        $root_node->appendChild($node);
        echo "\tSuccess!\n";
      } else {
        echo "\tFailed!\n";
      }

    }
  }
}
$doc->appendChild($root_node);

$xml = $doc->saveXML();
file_put_contents($config, $xml);

?>
