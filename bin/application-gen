#!/usr/bin/env php
<?php

require "header.php";

$root = PATH_APPS . "/";
$config = APPLICATION_BUILD;

$doc = new DomDocument();
$doc->xmlVersion    = "1.0";
$doc->formatOutput  = true;
$doc->encoding      = 'UTF-8';

$build = isset($argv[1]) && $argv[1] == "build";

$root_node = $doc->createElement("applications");

function create_js_root($cname, $windows) {
  $wins = implode("\n", $windows);
  $code = "";

  if ( $windows ) {
    $win = reset(array_keys($windows));
    $code = <<<EOJAVASCRIPT
        var root_window = new Window_{$win}(self);
        root_window.show();
EOJAVASCRIPT;
  }


  $template = <<<EOJAVASCRIPT
/**
 * Application: {$cname}
 *
 * @package ajwm.Applications
 * @author Anders Evenrud <andersevenrud@gmail.com>
 * @class
 */
var {$cname} = (function(\$, undefined) {
  return function(Window, Application, API, argv) {


%s

    ///////////////////////////////////////////////////////////////////////////
    // APPLICATION
    ///////////////////////////////////////////////////////////////////////////

    var __{$cname} = Application.extend({

      init : function() {
        this._super("{$cname}", argv);
      },

      destroy : function() {
        this._super();
      },

      run : function() {
        var self = this;

        this._super(self);

%s

        // Do your stuff here
      }
    });

    return new __{$cname}();
  };
})(\$);

EOJAVASCRIPT;

  return sprintf($template, $wins, $code);
}

function create_js($cname, $window, $content, $properties, $signals) {
  $dialog = $properties['type'] == "dialog" ? 'true' : 'false';
  $content = addslashes(str_replace("\n", "", preg_replace("/\s+/", " ", $content)));
  $template = <<<EOJAVASCRIPT

    var Window_{$window} = Window.extend({

      init : function(app) {
        this._super("{$cname}", $dialog, {}, {});
        this.content = $("{$content}").html();
%s

        this.app = app;
      },

      destroy : function() {
        this._super();
      },

%s

      create : function(id, zi, mcallback) {
        var el = this._super(id, zi, mcallback);
        var self = this;

        if ( el ) {
          el.find(".GtkScale").slider();

          el.find(".GtkToolItemGroup").click(function() {
            $(this).parents(".GtkToolPalette").first().find(".GtkToolItemGroup").removeClass("Checked");

            if ( $(this).hasClass("Checked") ) {
              $(this).removeClass("Checked");
            } else {
              $(this).addClass("Checked");
            }
          });

          el.find(".GtkToggleToolButton button").click(function() {
            if ( $(this).parent().hasClass("Checked") ) {
              $(this).parent().removeClass("Checked");
            } else {
              $(this).parent().addClass("Checked");
            }
          });


%s
          // Do your stuff here

        }

      }
    });

EOJAVASCRIPT;

  $js_methods = "";
  $js_run = "";
  $js_init = "";
  foreach ( $properties as $pk => $pv ) {
    if ( in_array($pk, Array("type")) ) {
      continue;
    }

    if ( is_bool($pv) ) {
      $pv = $pv ? 'true' : 'false';
    } else {
      if ( !$pv ) {
        $pv = "null";
      } else {
        if ( !is_numeric($pv) ) {
          $pv = "'{$pv}'";
        }
      }
    }
    $js_init .= "        this.{$pk} = $pv;\n";
  }

  foreach ( $signals as $obj => $evs ) {
    foreach ( $evs as $ev_type => $ev_handler ) {
            $js_methods .= <<<EOJAVASCRIPT

      Event{$ev_handler} : function(el, ev) {
      },


EOJAVASCRIPT;


            $js_run .= <<<EOJAVASCRIPT

          el.find(".{$obj}").{$ev_type}(function(ev) {
            self.Event{$ev_handler}(this, ev);
          });

EOJAVASCRIPT;


    }
  }

  return sprintf($template, $js_init, $js_methods, $js_run);
}

function create_css($cname) {
  return <<<EOCSS
@charset "UTF-8";
/**
 * Application: {$cname}
 *
 * @package ajwm.Applications
 * @author Anders Evenrud <andersevenrud@gmail.com>
 */

.{$cname} {

}

EOCSS;
}

if ( $dh  = opendir($root) ) {
  while (false !== ($filename = readdir($dh))) {
    if ( preg_match("/^(Application|System)(.*)(\.xml)$/", $filename) ) {

      $path = $root . $filename;
      $xml = new SimpleXmlElement(file_get_contents($path));

      $gfilename = str_replace(basename($filename), ((string) $xml['schema']), $filename);
      $cname = str_replace(".xml", "", $filename);

      echo "Building {$filename} ($gfilename)...\n";

      $break = false;
      foreach ( $xml->property as $p ) {
        if ( (string) $p['name'] == "enabled" ) {
          if ( (string) $p !== "true" ) {
            $break = true;
            break;
          }
        }
      }

      if ( $break ) {
        print "\tSkipped!\n";
        break;
      }

      if ( $glade = Glade::parse($root . $gfilename) ) {
        $windows = $glade->getWindows();

        $node = $doc->createElement("application");
        $node->setAttribute("name", $xml['name']);

        $node->setAttribute("title", constant("{$cname}::APPLICATION_TITLE"));
        $node->setAttribute("icon", constant("{$cname}::APPLICATION_ICON"));
        $node->setAttribute("class", $cname);

        $wins = Array();
        foreach ( $windows as $id => $window ) {
          if ( !$window['properties']['title'] ) {
            $window['properties']['title'] = constant("{$cname}::APPLICATION_TITLE");
          }
          if ( !$window['properties']['icon'] ) {
            $window['properties']['icon'] = constant("{$cname}::APPLICATION_ICON");
          }

          $wins[$id] = create_js($cname, $id, $window['content'], $window['properties'], $window['signals']);

          $win_node = $doc->createElement("window");
          $win_node->setAttribute("id", $id);

          $prop_node = $doc->createElement("property");
          $prop_node->setAttribute("name", "properties");
          $prop_node->appendChild($doc->createCDATASection(json_encode($window['properties'])));
          $win_node->appendChild($prop_node);

          $html_node = $doc->createElement("property");
          $html_node->setAttribute("name", "content");
          $html_node->appendChild($doc->createCDATASection($window['content']));
          $win_node->appendChild($html_node);

          $node->appendChild($win_node);
        }

        foreach ( $xml->resource as $r ) {
          $r = (string) $r;
          $res_node = $doc->createElement("resource");
          $res_node->appendChild(new DomText($r));
          $node->appendChild($res_node);
        }

        foreach ( $xml->mime as $r ) {
          $r = (string) $r;
          $mime_node = $doc->createElement("mime");
          $mime_node->appendChild(new DomText($r));
          $node->appendChild($mime_node);
        }

        $script = create_js_root($cname, $wins);
        $script_node = $doc->createElement("script");
        $script_node->appendChild($doc->createCDATASection($script));
        $node->appendChild($script_node);

        $style = create_css($cname);
        $style_node = $doc->createElement("style");
        $style_node->appendChild($doc->createCDATASection($style));
        $node->appendChild($style_node);

        $root_node->appendChild($node);
        echo "\tSuccess!\n";
      } else {
        echo "\tFailed!\n";
      }

    }
  }
}
$doc->appendChild($root_node);

$xml = $doc->saveXML();
file_put_contents($config, $xml);

?>
